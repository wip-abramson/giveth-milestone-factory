// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class DeployBridgedMilestone extends EthereumEvent {
  get params(): DeployBridgedMilestone__Params {
    return new DeployBridgedMilestone__Params(this);
  }
}

export class DeployBridgedMilestone__Params {
  _event: DeployBridgedMilestone;

  constructor(event: DeployBridgedMilestone) {
    this._event = event;
  }

  get milestone(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DeployLPMilestone extends EthereumEvent {
  get params(): DeployLPMilestone__Params {
    return new DeployLPMilestone__Params(this);
  }
}

export class DeployLPMilestone__Params {
  _event: DeployLPMilestone;

  constructor(event: DeployLPMilestone) {
    this._event = event;
  }

  get milestone(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Contract extends SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  APM_NODE(): Bytes {
    let result = super.call("APM_NODE", []);

    return result[0].toBytes();
  }

  try_APM_NODE(): CallResult<Bytes> {
    let result = super.tryCall("APM_NODE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  KERNEL_APP_ID(): Bytes {
    let result = super.call("KERNEL_APP_ID", []);

    return result[0].toBytes();
  }

  try_KERNEL_APP_ID(): CallResult<Bytes> {
    let result = super.tryCall("KERNEL_APP_ID", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  APP_ADDR_NAMESPACE(): Bytes {
    let result = super.call("APP_ADDR_NAMESPACE", []);

    return result[0].toBytes();
  }

  try_APP_ADDR_NAMESPACE(): CallResult<Bytes> {
    let result = super.tryCall("APP_ADDR_NAMESPACE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  KERNEL_APP(): Bytes {
    let result = super.call("KERNEL_APP", []);

    return result[0].toBytes();
  }

  try_KERNEL_APP(): CallResult<Bytes> {
    let result = super.tryCall("KERNEL_APP", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  LP_APP_ID(): Bytes {
    let result = super.call("LP_APP_ID", []);

    return result[0].toBytes();
  }

  try_LP_APP_ID(): CallResult<Bytes> {
    let result = super.tryCall("LP_APP_ID", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getRecoveryVault(): Address {
    let result = super.call("getRecoveryVault", []);

    return result[0].toAddress();
  }

  try_getRecoveryVault(): CallResult<Address> {
    let result = super.tryCall("getRecoveryVault", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  LP_MILESTONE_APP_ID(): Bytes {
    let result = super.call("LP_MILESTONE_APP_ID", []);

    return result[0].toBytes();
  }

  try_LP_MILESTONE_APP_ID(): CallResult<Bytes> {
    let result = super.tryCall("LP_MILESTONE_APP_ID", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  BRIDGED_MILESTONE_APP_ID(): Bytes {
    let result = super.call("BRIDGED_MILESTONE_APP_ID", []);

    return result[0].toBytes();
  }

  try_BRIDGED_MILESTONE_APP_ID(): CallResult<Bytes> {
    let result = super.tryCall("BRIDGED_MILESTONE_APP_ID", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  BRIDGED_MILESTONE_APP(): Bytes {
    let result = super.call("BRIDGED_MILESTONE_APP", []);

    return result[0].toBytes();
  }

  try_BRIDGED_MILESTONE_APP(): CallResult<Bytes> {
    let result = super.tryCall("BRIDGED_MILESTONE_APP", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  CORE_NAMESPACE(): Bytes {
    let result = super.call("CORE_NAMESPACE", []);

    return result[0].toBytes();
  }

  try_CORE_NAMESPACE(): CallResult<Bytes> {
    let result = super.tryCall("CORE_NAMESPACE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  allowRecoverability(token: Address): boolean {
    let result = super.call("allowRecoverability", [
      EthereumValue.fromAddress(token)
    ]);

    return result[0].toBoolean();
  }

  try_allowRecoverability(token: Address): CallResult<boolean> {
    let result = super.tryCall("allowRecoverability", [
      EthereumValue.fromAddress(token)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  ETH(): Address {
    let result = super.call("ETH", []);

    return result[0].toAddress();
  }

  try_ETH(): CallResult<Address> {
    let result = super.tryCall("ETH", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  LP_APP_INSTANCE(): Bytes {
    let result = super.call("LP_APP_INSTANCE", []);

    return result[0].toBytes();
  }

  try_LP_APP_INSTANCE(): CallResult<Bytes> {
    let result = super.tryCall("LP_APP_INSTANCE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  ACL_APP(): Bytes {
    let result = super.call("ACL_APP", []);

    return result[0].toBytes();
  }

  try_ACL_APP(): CallResult<Bytes> {
    let result = super.tryCall("ACL_APP", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  LP_MILESTONE_APP(): Bytes {
    let result = super.call("LP_MILESTONE_APP", []);

    return result[0].toBytes();
  }

  try_LP_MILESTONE_APP(): CallResult<Bytes> {
    let result = super.tryCall("LP_MILESTONE_APP", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  ACL_APP_ID(): Bytes {
    let result = super.call("ACL_APP_ID", []);

    return result[0].toBytes();
  }

  try_ACL_APP_ID(): CallResult<Bytes> {
    let result = super.tryCall("ACL_APP_ID", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  ETH_NODE(): Bytes {
    let result = super.call("ETH_NODE", []);

    return result[0].toBytes();
  }

  try_ETH_NODE(): CallResult<Bytes> {
    let result = super.tryCall("ETH_NODE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  VAULT_APP_ID(): Bytes {
    let result = super.call("VAULT_APP_ID", []);

    return result[0].toBytes();
  }

  try_VAULT_APP_ID(): CallResult<Bytes> {
    let result = super.tryCall("VAULT_APP_ID", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  kernel(): Address {
    let result = super.call("kernel", []);

    return result[0].toAddress();
  }

  try_kernel(): CallResult<Address> {
    let result = super.tryCall("kernel", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  APP_BASES_NAMESPACE(): Bytes {
    let result = super.call("APP_BASES_NAMESPACE", []);

    return result[0].toBytes();
  }

  try_APP_BASES_NAMESPACE(): CallResult<Bytes> {
    let result = super.tryCall("APP_BASES_NAMESPACE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }
}

export class NewLPMilestoneCall extends EthereumCall {
  get inputs(): NewLPMilestoneCall__Inputs {
    return new NewLPMilestoneCall__Inputs(this);
  }

  get outputs(): NewLPMilestoneCall__Outputs {
    return new NewLPMilestoneCall__Outputs(this);
  }
}

export class NewLPMilestoneCall__Inputs {
  _call: NewLPMilestoneCall;

  constructor(call: NewLPMilestoneCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _url(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _parentProject(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _reviewer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _recipient(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _milestoneManager(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _maxAmount(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _acceptedToken(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _reviewTimeoutSeconds(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class NewLPMilestoneCall__Outputs {
  _call: NewLPMilestoneCall;

  constructor(call: NewLPMilestoneCall) {
    this._call = call;
  }
}

export class NewBridgedMilestoneCall extends EthereumCall {
  get inputs(): NewBridgedMilestoneCall__Inputs {
    return new NewBridgedMilestoneCall__Inputs(this);
  }

  get outputs(): NewBridgedMilestoneCall__Outputs {
    return new NewBridgedMilestoneCall__Outputs(this);
  }
}

export class NewBridgedMilestoneCall__Inputs {
  _call: NewBridgedMilestoneCall;

  constructor(call: NewBridgedMilestoneCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _url(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _parentProject(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _reviewer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _milestoneManager(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _maxAmount(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _acceptedToken(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _reviewTimeoutSeconds(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class NewBridgedMilestoneCall__Outputs {
  _call: NewBridgedMilestoneCall;

  constructor(call: NewBridgedMilestoneCall) {
    this._call = call;
  }
}

export class TransferToVaultCall extends EthereumCall {
  get inputs(): TransferToVaultCall__Inputs {
    return new TransferToVaultCall__Inputs(this);
  }

  get outputs(): TransferToVaultCall__Outputs {
    return new TransferToVaultCall__Outputs(this);
  }
}

export class TransferToVaultCall__Inputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferToVaultCall__Outputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _kernel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
